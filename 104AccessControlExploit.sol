// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * 智能合约中的权限管理定义了不同角色在应用中的权限.
 * 通常来说,代币的铸造 提取资金 暂停等功能都需要较高权限的用户才能调用.
 * 如果权限配置错误,就可能造成意想不到的损失
 */

contract AccessControlExploit is ERC20, Ownable {
    constructor() ERC20("Wrong Access", "WA") {}

    //权限配置错误
    /**
     * 合约中的特殊功能没有加上权限管理
     * mint()函数没有进行权限管理,那么任何人都可以调用它铸造代币
     */
    function badMint(address to, uint amount) public {
        _mint(to, amount);
    }
    function goodMint(address to, uint amount) public onlyOwner {
        _mint(to, amount);
    }

    //授权检查错误
    /**
     * 权限管理漏洞是没有在函数中检查调用者是否拥有足够的授权
     * BSC上DeFi项目ShadowFi的代币合约忘了在burn()销毁函数中检查调用者的授权额度,
     * 导致攻击者可以任意的销毁其他地址的代币
     */
    function badBurn(address account, uint amount) public {
        _burn(account, amount);
    }
    function goodBurn(address account, uint amount) public {
        if(msg.sender != account) {
            _spendAllowance(account, msg.sender, amount);
        }
        _burn(account, amount);
    }
}

/**
 * 预防方法
 * 1. 使用Openzeppelin的权限管理库给合约的特殊函数配置相应的权限,比如OnlyOwner修饰符
 * 2. 在函数逻辑中确保合约调用者拥有足够的授权
 */